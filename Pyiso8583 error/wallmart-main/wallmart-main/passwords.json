# --- Login logic for app.py ---
from flask import Flask, render_template, request, redirect, session, url_for
import json
from utils import generate_otp, send_email_otp, send_sms_otp, cache_otp, verify_otp
from config import get_next_wallet
from iso8583_crypto import process_crypto_payout

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

# Load credentials from passwords.json
with open('passwords.json') as f:
    credentials = json.load(f)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        user_id = request.form["user_id"]
        password = request.form["password"]

        user = credentials.get(user_id)
        if user and user["password"] == password:
            session["user_id"] = user_id
            session["role"] = user["role"]
            return redirect("/dashboard")
        else:
            return "Login failed: Invalid credentials"

    return render_template("login.html")

@app.route("/dashboard")
def dashboard():
    if "user_id" not in session:
        return redirect("/login")
    return render_template("dashboard.html", role=session["role"])

@app.route("/logout")
def logout():
    session.clear()
    return redirect("/login")

@app.route("/payout", methods=["GET", "POST"])
def payout():
    if "user_id" not in session:
        return redirect("/login")

    if request.method == "POST":
        data = request.form.to_dict()
        data["user_id"] = session["user_id"]
        currency = data["currency"]
        payout_type = data["payout_type"]
        amount = data["amount"]

        wallet = get_next_wallet(currency, payout_type)
        data["wallet"] = wallet

        tx_hash = process_crypto_payout(wallet, amount, currency, payout_type)

        # Store tx or handle result...
        return render_template("success.html", tx_hash=tx_hash)

    # On GET
    selected_wallet = get_next_wallet("USDT", "TRC20")
    return render_template("payout.html", selected_wallet=selected_wallet)

@app.route("/transactions")
def transactions():
    if "user_id" not in session:
        return redirect("/login")
    txs = [{
        "date": "2025-07-24",
        "transaction_id": "TX12345678",
        "amount": "100",
        "currency": "USDT",
        "network": "TRC20",
        "status": "Success",
        "tx_hash": "abc123def456",
        "tx_link": "https://tronscan.org/#/transaction/abc123def456"
    }]
    return render_template("transactions.html", transactions=txs)

@app.route("/forgot_password")
def forgot_password():
    return render_template("forgot_password.html")

@app.route("/send_otp", methods=["POST"])
def send_otp():
    user_id = request.form["user_id"]
    otp = generate_otp()
    cache_otp(user_id, otp)
    if "@" in user_id:
        send_email_otp(user_id, otp)
    else:
        send_sms_otp(user_id, otp)
    session["otp_user"] = user_id
    return redirect("/reset_password")

@app.route("/reset_password")
def reset_password():
    return render_template("otp.html")

@app.route("/verify_otp", methods=["POST"])
def verify_otp_route():
    user_id = session.get("otp_user")
    otp = request.form["otp"]
    new_password = request.form["new_password"]
    if verify_otp(user_id, otp):
        credentials[user_id]["password"] = new_password
        with open("passwords.json", "w") as f:
            json.dump(credentials, f, indent=2)
        return redirect("/login")
    return "Invalid OTP or session expired"
